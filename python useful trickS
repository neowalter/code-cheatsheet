# output
output = f'TEST,{TEST1} {TEST2}'
output = 'TEST, {0}, {1}'.format(test1, test2)

#condition, indentation for 4spaces is necessary
if test in ('test1','test2',test3'):
    Test = 
elif test == 'test4':
    Test =
else:
    Test =


#preset for print different result
def printTEST(task_name)
    print(task_name)
printTEST("test1")
printTEST("test2")

#reuse
from printTEST import *
print('test')


#change row
def TEST(1,2,3,4,5,6, \
         7,8,9,0)
#decorator
@TEST
def test():
print(decorator test)


#check interact error
response.raise_for_status()

#change dictionary 
TESt = {'test0':'test1','test1':'test2'}
TEST{}
TEST['test'] = TESt
staff.json = json.dumps(TEST)


#secure personal api
#save as .env file in the same file folder
#need a requirements.txt file
api_key = TEST
#.gitignore file
.env
#PYTHON APP
from dotenv import load_dotenv
impot os
load_dotenv()
keys = os.getenv('api_key')

#interact with command
import subprocess
#run python script TEST
subprocess.chess_call(['python3','TEST.py'])

#organize files in system folder
import os
from pathlib import Path
DIRECTORIES = {
    "TEST1": ['.pdf','txt'],
    "TEST2": ['.jpg','.jpeg','.png']
}
def pickdir(value):
    for category, suffixes in DIRECTORIES.items():
        for suffix in suffixes:
            if suffix == value:
                return category
    return 'unsupported file'
def orgdir():
    for items in os.scandir():
        if item.is_dir():
            continue
        filePath = Path(item)
        filetype = filePath.suffix.lower()
        directory = pickdir(filetype)
        directoryPath = Path(directory)
        if directoryPath.is_dir() != True:
            directoryPath.mkdir()
        filePath.rename(directoryPath.joinpath(filePath))
orgdir()
